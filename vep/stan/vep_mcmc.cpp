// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace rpne_040_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "rpne_040.stan");
    reader.add_event(199, 197, "end", "rpne_040.stan");
    return reader;
}

class rpne_040_model
  : public stan::model::model_base_crtp<rpne_040_model> {
private:
        int nn;
        int nt;
        int ns;
        matrix_d Obs;
        matrix_d SC;
        matrix_d gain;
        matrix_d eig;
        double dt;
        double tau0;
        double I1;
        double Ks;
        vector_d xs;
        matrix_d wtm;
        vector_d wt;
        vector_d x_init;
public:
    rpne_040_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    rpne_040_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "rpne_040_model_namespace::rpne_040_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "nn", "int", context__.to_vec());
            nn = int(0);
            vals_i__ = context__.vals_i("nn");
            pos__ = 0;
            nn = vals_i__[pos__++];

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "ns", "int", context__.to_vec());
            ns = int(0);
            vals_i__ = context__.vals_i("ns");
            pos__ = 0;
            ns = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("Obs", "nt", nt);
            validate_non_negative_index("Obs", "ns", ns);
            context__.validate_dims("data initialization", "Obs", "matrix_d", context__.to_vec(nt,ns));
            Obs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nt, ns);
            vals_r__ = context__.vals_r("Obs");
            pos__ = 0;
            size_t Obs_j_2_max__ = ns;
            size_t Obs_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < Obs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Obs_j_1_max__; ++j_1__) {
                    Obs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("SC", "nn", nn);
            validate_non_negative_index("SC", "nn", nn);
            context__.validate_dims("data initialization", "SC", "matrix_d", context__.to_vec(nn,nn));
            SC = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nn, nn);
            vals_r__ = context__.vals_r("SC");
            pos__ = 0;
            size_t SC_j_2_max__ = nn;
            size_t SC_j_1_max__ = nn;
            for (size_t j_2__ = 0; j_2__ < SC_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < SC_j_1_max__; ++j_1__) {
                    SC(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("gain", "ns", ns);
            validate_non_negative_index("gain", "nn", nn);
            context__.validate_dims("data initialization", "gain", "matrix_d", context__.to_vec(ns,nn));
            gain = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(ns, nn);
            vals_r__ = context__.vals_r("gain");
            pos__ = 0;
            size_t gain_j_2_max__ = nn;
            size_t gain_j_1_max__ = ns;
            for (size_t j_2__ = 0; j_2__ < gain_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < gain_j_1_max__; ++j_1__) {
                    gain(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("eig", "nn", nn);
            validate_non_negative_index("eig", "nn", nn);
            context__.validate_dims("data initialization", "eig", "matrix_d", context__.to_vec(nn,nn));
            eig = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nn, nn);
            vals_r__ = context__.vals_r("eig");
            pos__ = 0;
            size_t eig_j_2_max__ = nn;
            size_t eig_j_1_max__ = nn;
            for (size_t j_2__ = 0; j_2__ < eig_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eig_j_1_max__; ++j_1__) {
                    eig(j_1__, j_2__) = vals_r__[pos__++];
                }
            }


            // initialize transformed data variables
            current_statement_begin__ = 14;
            dt = double(0);
            stan::math::fill(dt, DUMMY_VAR__);

            current_statement_begin__ = 15;
            tau0 = double(0);
            stan::math::fill(tau0, DUMMY_VAR__);

            current_statement_begin__ = 16;
            I1 = double(0);
            stan::math::fill(I1, DUMMY_VAR__);

            current_statement_begin__ = 17;
            Ks = double(0);
            stan::math::fill(Ks, DUMMY_VAR__);

            current_statement_begin__ = 19;
            validate_non_negative_index("xs", "(nt * ns)", (nt * ns));
            xs = Eigen::Matrix<double, Eigen::Dynamic, 1>((nt * ns));
            stan::math::fill(xs, DUMMY_VAR__);

            current_statement_begin__ = 20;
            validate_non_negative_index("wtm", "nt", nt);
            validate_non_negative_index("wtm", "ns", ns);
            wtm = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nt, ns);
            stan::math::fill(wtm, DUMMY_VAR__);

            current_statement_begin__ = 21;
            validate_non_negative_index("wt", "(nt * ns)", (nt * ns));
            wt = Eigen::Matrix<double, Eigen::Dynamic, 1>((nt * ns));
            stan::math::fill(wt, DUMMY_VAR__);

            current_statement_begin__ = 22;
            validate_non_negative_index("x_init", "nn", nn);
            x_init = Eigen::Matrix<double, Eigen::Dynamic, 1>(nn);
            stan::math::fill(x_init, DUMMY_VAR__);

            // execute transformed data statements
            current_statement_begin__ = 23;
            for (int i = 1; i <= nn; ++i) {

                current_statement_begin__ = 24;
                stan::model::assign(x_init, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            -(1.98), 
                            "assigning variable x_init");
            }
            current_statement_begin__ = 27;
            stan::math::assign(xs, to_vector(stan::math::log(Obs)));
            current_statement_begin__ = 28;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 29;
                stan::model::assign(wtm, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            subtract(stan::model::rvalue(Obs, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Obs"), stan::model::rvalue(Obs, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Obs")), 
                            "assigning variable wtm");
            }
            current_statement_begin__ = 31;
            stan::math::assign(wt, to_vector(wtm));
            current_statement_begin__ = 34;
            stan::math::assign(dt, 0.1);
            current_statement_begin__ = 35;
            stan::math::assign(tau0, 15.0);
            current_statement_begin__ = 36;
            stan::math::assign(I1, 3.1);
            current_statement_begin__ = 37;
            stan::math::assign(Ks, 1.0);

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 47;
            validate_non_negative_index("z_init_star", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 48;
            validate_non_negative_index("x0_star", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            validate_non_negative_index("u_star", "ns", ns);
            num_params_r__ += ns;
            current_statement_begin__ = 52;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~rpne_040_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 47;
        if (!(context__.contains_r("z_init_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_init_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_init_star");
        pos__ = 0U;
        validate_non_negative_index("z_init_star", "nn", nn);
        context__.validate_dims("parameter initialization", "z_init_star", "vector_d", context__.to_vec(nn));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_init_star(nn);
        size_t z_init_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < z_init_star_j_1_max__; ++j_1__) {
            z_init_star(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z_init_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_init_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 48;
        if (!(context__.contains_r("x0_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x0_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x0_star");
        pos__ = 0U;
        validate_non_negative_index("x0_star", "nn", nn);
        context__.validate_dims("parameter initialization", "x0_star", "vector_d", context__.to_vec(nn));
        Eigen::Matrix<double, Eigen::Dynamic, 1> x0_star(nn);
        size_t x0_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < x0_star_j_1_max__; ++j_1__) {
            x0_star(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(x0_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x0_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 49;
        if (!(context__.contains_r("K_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable K_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("K_star");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "K_star", "double", context__.to_vec());
        double K_star(0);
        K_star = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(-(1.0), K_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable K_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 50;
        if (!(context__.contains_r("amp_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable amp_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("amp_star");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "amp_star", "double", context__.to_vec());
        double amp_star(0);
        amp_star = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0.0, amp_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable amp_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 51;
        if (!(context__.contains_r("u_star")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable u_star missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("u_star");
        pos__ = 0U;
        validate_non_negative_index("u_star", "ns", ns);
        context__.validate_dims("parameter initialization", "u_star", "vector_d", context__.to_vec(ns));
        Eigen::Matrix<double, Eigen::Dynamic, 1> u_star(ns);
        size_t u_star_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < u_star_j_1_max__; ++j_1__) {
            u_star(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(u_star);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable u_star: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 52;
        if (!(context__.contains_r("log_eps_sq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_eps_sq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_eps_sq");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log_eps_sq", "double", context__.to_vec());
        double log_eps_sq(0);
        log_eps_sq = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log_eps_sq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_eps_sq: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_init_star;
            (void) z_init_star;  // dummy to suppress unused var warning
            if (jacobian__)
                z_init_star = in__.vector_constrain(nn, lp__);
            else
                z_init_star = in__.vector_constrain(nn);

            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x0_star;
            (void) x0_star;  // dummy to suppress unused var warning
            if (jacobian__)
                x0_star = in__.vector_constrain(nn, lp__);
            else
                x0_star = in__.vector_constrain(nn);

            current_statement_begin__ = 49;
            local_scalar_t__ K_star;
            (void) K_star;  // dummy to suppress unused var warning
            if (jacobian__)
                K_star = in__.scalar_lb_constrain(-(1.0), lp__);
            else
                K_star = in__.scalar_lb_constrain(-(1.0));

            current_statement_begin__ = 50;
            local_scalar_t__ amp_star;
            (void) amp_star;  // dummy to suppress unused var warning
            if (jacobian__)
                amp_star = in__.scalar_lb_constrain(0.0, lp__);
            else
                amp_star = in__.scalar_lb_constrain(0.0);

            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u_star;
            (void) u_star;  // dummy to suppress unused var warning
            if (jacobian__)
                u_star = in__.vector_constrain(ns, lp__);
            else
                u_star = in__.vector_constrain(ns);

            current_statement_begin__ = 52;
            local_scalar_t__ log_eps_sq;
            (void) log_eps_sq;  // dummy to suppress unused var warning
            if (jacobian__)
                log_eps_sq = in__.scalar_constrain(lp__);
            else
                log_eps_sq = in__.scalar_constrain();

            // transformed parameters
            current_statement_begin__ = 57;
            validate_non_negative_index("x0", "nn", nn);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x0(nn);
            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("z_init", "nn", nn);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_init(nn);
            stan::math::initialize(z_init, DUMMY_VAR__);
            stan::math::fill(z_init, DUMMY_VAR__);

            current_statement_begin__ = 59;
            local_scalar_t__ K;
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);

            current_statement_begin__ = 60;
            local_scalar_t__ amp;
            (void) amp;  // dummy to suppress unused var warning
            stan::math::initialize(amp, DUMMY_VAR__);
            stan::math::fill(amp, DUMMY_VAR__);

            current_statement_begin__ = 61;
            validate_non_negative_index("u", "ns", ns);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u(ns);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);

            current_statement_begin__ = 62;
            local_scalar_t__ eps;
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 64;
            stan::math::assign(x0, add(-(3.0), multiply(multiply(0.30, eig), x0_star)));
            current_statement_begin__ = 65;
            stan::math::assign(z_init, add(4.1, multiply(multiply(0.1, eig), z_init_star)));
            current_statement_begin__ = 66;
            stan::math::assign(K, (Ks + (1.0 * K_star)));
            current_statement_begin__ = 67;
            stan::math::assign(amp, (0.005 + (0.01 * amp_star)));
            current_statement_begin__ = 68;
            stan::math::assign(u, add(2.0, multiply(1.0, u_star)));
            current_statement_begin__ = 69;
            stan::math::assign(eps, stan::math::exp(((0.33 * log_eps_sq) - 3.0)));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 57;
            size_t x0_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(x0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 58;
            size_t z_init_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < z_init_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(z_init(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: z_init" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable z_init: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 59;
            if (stan::math::is_uninitialized(K)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: K";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable K: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 60;
            if (stan::math::is_uninitialized(amp)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: amp";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable amp: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 61;
            size_t u_j_1_max__ = ns;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(u(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: u" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable u: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 62;
            if (stan::math::is_uninitialized(eps)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: eps";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eps: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body
            {
            current_statement_begin__ = 76;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(nn, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 77;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z(nn, nt);
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);

            current_statement_begin__ = 78;
            validate_non_negative_index("xhat2", "nt", nt);
            validate_non_negative_index("xhat2", "ns", ns);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> xhat2(nt, ns);
            stan::math::initialize(xhat2, DUMMY_VAR__);
            stan::math::fill(xhat2, DUMMY_VAR__);

            current_statement_begin__ = 79;
            validate_non_negative_index("xhat", "(nt * ns)", (nt * ns));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> xhat((nt * ns));
            stan::math::initialize(xhat, DUMMY_VAR__);
            stan::math::fill(xhat, DUMMY_VAR__);

            current_statement_begin__ = 81;
            local_scalar_t__ dx(DUMMY_VAR__);
            (void) dx;  // dummy to suppress unused var warning
            stan::math::initialize(dx, DUMMY_VAR__);
            stan::math::fill(dx, DUMMY_VAR__);

            current_statement_begin__ = 82;
            local_scalar_t__ dz(DUMMY_VAR__);
            (void) dz;  // dummy to suppress unused var warning
            stan::math::initialize(dz, DUMMY_VAR__);
            stan::math::fill(dz, DUMMY_VAR__);

            current_statement_begin__ = 83;
            local_scalar_t__ gx(DUMMY_VAR__);
            (void) gx;  // dummy to suppress unused var warning
            stan::math::initialize(gx, DUMMY_VAR__);
            stan::math::fill(gx, DUMMY_VAR__);


            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(x0_star, 0., 1.));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log<propto__>(amp_star, 0., 1.));
            current_statement_begin__ = 89;
            lp_accum__.add(normal_log<propto__>(K_star, 0., 1.));
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(log_eps_sq, 0., 10.0));
            current_statement_begin__ = 91;
            lp_accum__.add(normal_log<propto__>(u_star, 0., 1.0));
            current_statement_begin__ = 92;
            lp_accum__.add(normal_log<propto__>(z_init_star, 0, 1.));
            current_statement_begin__ = 96;
            for (int i = 1; i <= nn; ++i) {

                current_statement_begin__ = 97;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(x_init, i, "x_init", 1), 
                            "assigning variable x");
                current_statement_begin__ = 98;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(z_init, i, "z_init", 1), 
                            "assigning variable z");
            }
            current_statement_begin__ = 101;
            for (int t = 1; t <= (nt - 1); ++t) {

                current_statement_begin__ = 102;
                for (int i = 1; i <= nn; ++i) {

                    current_statement_begin__ = 103;
                    stan::math::assign(gx, 0);
                    current_statement_begin__ = 104;
                    for (int j = 1; j <= nn; ++j) {
                        current_statement_begin__ = 105;
                        stan::math::assign(gx, (gx + (get_base1(SC, i, j, "SC", 1) * (get_base1(x, j, t, "x", 1) - get_base1(x, i, t, "x", 1)))));
                    }
                    current_statement_begin__ = 106;
                    stan::math::assign(dx, ((((1.0 - ((get_base1(x, i, t, "x", 1) * get_base1(x, i, t, "x", 1)) * get_base1(x, i, t, "x", 1))) - ((2.0 * get_base1(x, i, t, "x", 1)) * get_base1(x, i, t, "x", 1))) - get_base1(z, i, t, "z", 1)) + I1));
                    current_statement_begin__ = 107;
                    stan::math::assign(dz, ((1 / tau0) * (((4 * (get_base1(x, i, t, "x", 1) - get_base1(x0, i, "x0", 1))) - get_base1(z, i, t, "z", 1)) - (K * gx))));
                    current_statement_begin__ = 108;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                (get_base1(x, i, t, "x", 1) + (dt * dx)), 
                                "assigning variable x");
                    current_statement_begin__ = 109;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                (get_base1(z, i, t, "z", 1) + (dt * dz)), 
                                "assigning variable z");
                }
            }
            current_statement_begin__ = 113;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 114;
                stan::model::assign(xhat2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(add(multiply(amp, multiply(gain, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "x"))), u)), 
                            "assigning variable xhat2");
            }
            current_statement_begin__ = 117;
            stan::math::assign(xhat, to_vector(xhat2));
            current_statement_begin__ = 119;
            for (int i = ((10 * ns) + 1); i <= (nt * ns); ++i) {

                current_statement_begin__ = 120;
                lp_accum__.add(normal_log(get_base1(xs, i, "xs", 1), get_base1(xhat, i, "xhat", 1), eps));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("z_init_star");
        names__.push_back("x0_star");
        names__.push_back("K_star");
        names__.push_back("amp_star");
        names__.push_back("u_star");
        names__.push_back("log_eps_sq");
        names__.push_back("x0");
        names__.push_back("z_init");
        names__.push_back("K");
        names__.push_back("amp");
        names__.push_back("u");
        names__.push_back("eps");
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("xhat_qqc2");
        names__.push_back("xhat_q2");
        names__.push_back("xhat_qqc");
        names__.push_back("x_ppc");
        names__.push_back("log_lik");
        names__.push_back("xhat_q");
        names__.push_back("x_p");
        names__.push_back("log_lik_sum");
        names__.push_back("gx");
        names__.push_back("dx");
        names__.push_back("dz");
        names__.push_back("num_params");
        names__.push_back("num_data");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt * ns));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt * ns));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt * ns));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "rpne_040_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_init_star = in__.vector_constrain(nn);
        size_t z_init_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < z_init_star_j_1_max__; ++j_1__) {
            vars__.push_back(z_init_star(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> x0_star = in__.vector_constrain(nn);
        size_t x0_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < x0_star_j_1_max__; ++j_1__) {
            vars__.push_back(x0_star(j_1__));
        }

        double K_star = in__.scalar_lb_constrain(-(1.0));
        vars__.push_back(K_star);

        double amp_star = in__.scalar_lb_constrain(0.0);
        vars__.push_back(amp_star);

        Eigen::Matrix<double, Eigen::Dynamic, 1> u_star = in__.vector_constrain(ns);
        size_t u_star_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < u_star_j_1_max__; ++j_1__) {
            vars__.push_back(u_star(j_1__));
        }

        double log_eps_sq = in__.scalar_constrain();
        vars__.push_back(log_eps_sq);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 57;
            validate_non_negative_index("x0", "nn", nn);
            Eigen::Matrix<double, Eigen::Dynamic, 1> x0(nn);
            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0, DUMMY_VAR__);

            current_statement_begin__ = 58;
            validate_non_negative_index("z_init", "nn", nn);
            Eigen::Matrix<double, Eigen::Dynamic, 1> z_init(nn);
            stan::math::initialize(z_init, DUMMY_VAR__);
            stan::math::fill(z_init, DUMMY_VAR__);

            current_statement_begin__ = 59;
            double K;
            (void) K;  // dummy to suppress unused var warning
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);

            current_statement_begin__ = 60;
            double amp;
            (void) amp;  // dummy to suppress unused var warning
            stan::math::initialize(amp, DUMMY_VAR__);
            stan::math::fill(amp, DUMMY_VAR__);

            current_statement_begin__ = 61;
            validate_non_negative_index("u", "ns", ns);
            Eigen::Matrix<double, Eigen::Dynamic, 1> u(ns);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);

            current_statement_begin__ = 62;
            double eps;
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 64;
            stan::math::assign(x0, add(-(3.0), multiply(multiply(0.30, eig), x0_star)));
            current_statement_begin__ = 65;
            stan::math::assign(z_init, add(4.1, multiply(multiply(0.1, eig), z_init_star)));
            current_statement_begin__ = 66;
            stan::math::assign(K, (Ks + (1.0 * K_star)));
            current_statement_begin__ = 67;
            stan::math::assign(amp, (0.005 + (0.01 * amp_star)));
            current_statement_begin__ = 68;
            stan::math::assign(u, add(2.0, multiply(1.0, u_star)));
            current_statement_begin__ = 69;
            stan::math::assign(eps, stan::math::exp(((0.33 * log_eps_sq) - 3.0)));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t x0_j_1_max__ = nn;
                for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
                    vars__.push_back(x0(j_1__));
                }
                size_t z_init_j_1_max__ = nn;
                for (size_t j_1__ = 0; j_1__ < z_init_j_1_max__; ++j_1__) {
                    vars__.push_back(z_init(j_1__));
                }
                vars__.push_back(K);
                vars__.push_back(amp);
                size_t u_j_1_max__ = ns;
                for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                    vars__.push_back(u(j_1__));
                }
                vars__.push_back(eps);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 126;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(nn, nt);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 127;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z(nn, nt);
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);

            current_statement_begin__ = 128;
            validate_non_negative_index("xhat_qqc2", "nt", nt);
            validate_non_negative_index("xhat_qqc2", "ns", ns);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> xhat_qqc2(nt, ns);
            stan::math::initialize(xhat_qqc2, DUMMY_VAR__);
            stan::math::fill(xhat_qqc2, DUMMY_VAR__);

            current_statement_begin__ = 129;
            validate_non_negative_index("xhat_q2", "nt", nt);
            validate_non_negative_index("xhat_q2", "ns", ns);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> xhat_q2(nt, ns);
            stan::math::initialize(xhat_q2, DUMMY_VAR__);
            stan::math::fill(xhat_q2, DUMMY_VAR__);

            current_statement_begin__ = 131;
            validate_non_negative_index("xhat_qqc", "(nt * ns)", (nt * ns));
            Eigen::Matrix<double, Eigen::Dynamic, 1> xhat_qqc((nt * ns));
            stan::math::initialize(xhat_qqc, DUMMY_VAR__);
            stan::math::fill(xhat_qqc, DUMMY_VAR__);

            current_statement_begin__ = 132;
            validate_non_negative_index("x_ppc", "(nt * ns)", (nt * ns));
            Eigen::Matrix<double, Eigen::Dynamic, 1> x_ppc((nt * ns));
            stan::math::initialize(x_ppc, DUMMY_VAR__);
            stan::math::fill(x_ppc, DUMMY_VAR__);

            current_statement_begin__ = 133;
            validate_non_negative_index("log_lik", "(nt * ns)", (nt * ns));
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik((nt * ns));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 135;
            validate_non_negative_index("xhat_q", "nt", nt);
            validate_non_negative_index("xhat_q", "ns", ns);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> xhat_q(nt, ns);
            stan::math::initialize(xhat_q, DUMMY_VAR__);
            stan::math::fill(xhat_q, DUMMY_VAR__);

            current_statement_begin__ = 136;
            validate_non_negative_index("x_p", "nt", nt);
            validate_non_negative_index("x_p", "ns", ns);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x_p(nt, ns);
            stan::math::initialize(x_p, DUMMY_VAR__);
            stan::math::fill(x_p, DUMMY_VAR__);

            current_statement_begin__ = 137;
            validate_non_negative_index("log_lik_sum", "nt", nt);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_sum(nt);
            stan::math::initialize(log_lik_sum, DUMMY_VAR__);
            stan::math::fill(log_lik_sum, DUMMY_VAR__);
            stan::math::assign(log_lik_sum,rep_vector(0, nt));

            current_statement_begin__ = 139;
            double gx;
            (void) gx;  // dummy to suppress unused var warning
            stan::math::initialize(gx, DUMMY_VAR__);
            stan::math::fill(gx, DUMMY_VAR__);

            current_statement_begin__ = 140;
            double dx;
            (void) dx;  // dummy to suppress unused var warning
            stan::math::initialize(dx, DUMMY_VAR__);
            stan::math::fill(dx, DUMMY_VAR__);

            current_statement_begin__ = 141;
            double dz;
            (void) dz;  // dummy to suppress unused var warning
            stan::math::initialize(dz, DUMMY_VAR__);
            stan::math::fill(dz, DUMMY_VAR__);

            current_statement_begin__ = 143;
            int num_params;
            (void) num_params;  // dummy to suppress unused var warning
            stan::math::fill(num_params, std::numeric_limits<int>::min());

            current_statement_begin__ = 144;
            int num_data;
            (void) num_data;  // dummy to suppress unused var warning
            stan::math::fill(num_data, std::numeric_limits<int>::min());

            // generated quantities statements
            current_statement_begin__ = 145;
            stan::math::assign(num_params, (((2 * (nt * ns)) + nn) + 6));
            current_statement_begin__ = 146;
            stan::math::assign(num_data, (nt * ns));
            current_statement_begin__ = 149;
            for (int i = 1; i <= nn; ++i) {

                current_statement_begin__ = 150;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(x_init, i, "x_init", 1), 
                            "assigning variable x");
                current_statement_begin__ = 151;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(z_init, i, "z_init", 1), 
                            "assigning variable z");
            }
            current_statement_begin__ = 154;
            for (int t = 1; t <= (nt - 1); ++t) {

                current_statement_begin__ = 155;
                for (int i = 1; i <= nn; ++i) {

                    current_statement_begin__ = 156;
                    stan::math::assign(gx, 0);
                    current_statement_begin__ = 157;
                    for (int j = 1; j <= nn; ++j) {
                        current_statement_begin__ = 158;
                        stan::math::assign(gx, (gx + (get_base1(SC, i, j, "SC", 1) * (get_base1(x, j, t, "x", 1) - get_base1(x, i, t, "x", 1)))));
                    }
                    current_statement_begin__ = 159;
                    stan::math::assign(dx, ((((1.0 - ((get_base1(x, i, t, "x", 1) * get_base1(x, i, t, "x", 1)) * get_base1(x, i, t, "x", 1))) - ((2.0 * get_base1(x, i, t, "x", 1)) * get_base1(x, i, t, "x", 1))) - get_base1(z, i, t, "z", 1)) + I1));
                    current_statement_begin__ = 160;
                    stan::math::assign(dz, ((1 / tau0) * (((4 * (get_base1(x, i, t, "x", 1) - get_base1(x0, i, "x0", 1))) - get_base1(z, i, t, "z", 1)) - (K * gx))));
                    current_statement_begin__ = 161;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                (get_base1(x, i, t, "x", 1) + (dt * dx)), 
                                "assigning variable x");
                    current_statement_begin__ = 162;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list())), 
                                (get_base1(z, i, t, "z", 1) + (dt * dz)), 
                                "assigning variable z");
                }
            }
            current_statement_begin__ = 167;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 168;
                stan::model::assign(xhat_qqc2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(add(multiply(amp, multiply(gain, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "x"))), u)), 
                            "assigning variable xhat_qqc2");
            }
            current_statement_begin__ = 171;
            stan::math::assign(xhat_qqc, to_vector(xhat_qqc2));
            current_statement_begin__ = 173;
            for (int i = 1; i <= (nt * ns); ++i) {

                current_statement_begin__ = 174;
                stan::model::assign(x_ppc, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_rng(get_base1(xhat_qqc, i, "xhat_qqc", 1), eps, base_rng__), 
                            "assigning variable x_ppc");
            }
            current_statement_begin__ = 177;
            for (int i = 1; i <= (nt * ns); ++i) {

                current_statement_begin__ = 178;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(xs, i, "xs", 1), get_base1(xhat_qqc, i, "xhat_qqc", 1), eps), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 182;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 183;
                stan::model::assign(xhat_q2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(add(multiply(amp, multiply(gain, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "x"))), u)), 
                            "assigning variable xhat_q2");
            }
            current_statement_begin__ = 186;
            stan::math::assign(xhat_q, xhat_q2);
            current_statement_begin__ = 188;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 189;
                for (int j = 1; j <= ns; ++j) {
                    current_statement_begin__ = 190;
                    stan::model::assign(x_p, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                normal_rng(get_base1(xhat_q, i, j, "xhat_q", 1), eps, base_rng__), 
                                "assigning variable x_p");
                }
            }
            current_statement_begin__ = 193;
            for (int i = 1; i <= nt; ++i) {

                current_statement_begin__ = 194;
                for (int j = 1; j <= ns; ++j) {
                    current_statement_begin__ = 195;
                    stan::model::assign(log_lik_sum, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (stan::model::rvalue(log_lik_sum, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "log_lik_sum") + normal_log(get_base1(Obs, i, j, "Obs", 1), get_base1(xhat_q, i, j, "xhat_q", 1), eps)), 
                                "assigning variable log_lik_sum");
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 126;
            size_t x_j_2_max__ = nt;
            size_t x_j_1_max__ = nn;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    vars__.push_back(x(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 127;
            size_t z_j_2_max__ = nt;
            size_t z_j_1_max__ = nn;
            for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                    vars__.push_back(z(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 128;
            size_t xhat_qqc2_j_2_max__ = ns;
            size_t xhat_qqc2_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < xhat_qqc2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xhat_qqc2_j_1_max__; ++j_1__) {
                    vars__.push_back(xhat_qqc2(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 129;
            size_t xhat_q2_j_2_max__ = ns;
            size_t xhat_q2_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < xhat_q2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xhat_q2_j_1_max__; ++j_1__) {
                    vars__.push_back(xhat_q2(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 131;
            size_t xhat_qqc_j_1_max__ = (nt * ns);
            for (size_t j_1__ = 0; j_1__ < xhat_qqc_j_1_max__; ++j_1__) {
                vars__.push_back(xhat_qqc(j_1__));
            }

            current_statement_begin__ = 132;
            size_t x_ppc_j_1_max__ = (nt * ns);
            for (size_t j_1__ = 0; j_1__ < x_ppc_j_1_max__; ++j_1__) {
                vars__.push_back(x_ppc(j_1__));
            }

            current_statement_begin__ = 133;
            size_t log_lik_j_1_max__ = (nt * ns);
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }

            current_statement_begin__ = 135;
            size_t xhat_q_j_2_max__ = ns;
            size_t xhat_q_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < xhat_q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xhat_q_j_1_max__; ++j_1__) {
                    vars__.push_back(xhat_q(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 136;
            size_t x_p_j_2_max__ = ns;
            size_t x_p_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < x_p_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_p_j_1_max__; ++j_1__) {
                    vars__.push_back(x_p(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 137;
            size_t log_lik_sum_j_1_max__ = nt;
            for (size_t j_1__ = 0; j_1__ < log_lik_sum_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_sum(j_1__));
            }

            current_statement_begin__ = 139;
            vars__.push_back(gx);

            current_statement_begin__ = 140;
            vars__.push_back(dx);

            current_statement_begin__ = 141;
            vars__.push_back(dz);

            current_statement_begin__ = 143;
            vars__.push_back(num_params);

            current_statement_begin__ = 144;
            vars__.push_back(num_data);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "rpne_040_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t z_init_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < z_init_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x0_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < x0_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "K_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amp_star";
        param_names__.push_back(param_name_stream__.str());
        size_t u_star_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < u_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_eps_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t x0_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t z_init_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < z_init_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_init" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "K";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "amp";
            param_names__.push_back(param_name_stream__.str());
            size_t u_j_1_max__ = ns;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t x_j_2_max__ = nt;
        size_t x_j_1_max__ = nn;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_j_2_max__ = nt;
        size_t z_j_1_max__ = nn;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_qqc2_j_2_max__ = ns;
        size_t xhat_qqc2_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_qqc2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_qqc2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_qqc2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_q2_j_2_max__ = ns;
        size_t xhat_q2_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_q2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_q2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_q2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_qqc_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < xhat_qqc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xhat_qqc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_ppc_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < x_ppc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_ppc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xhat_q_j_2_max__ = ns;
        size_t xhat_q_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_q_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_q_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_q" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x_p_j_2_max__ = ns;
        size_t x_p_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < x_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_sum_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < log_lik_sum_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_sum" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "num_params";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "num_data";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t z_init_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < z_init_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x0_star_j_1_max__ = nn;
        for (size_t j_1__ = 0; j_1__ < x0_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "K_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amp_star";
        param_names__.push_back(param_name_stream__.str());
        size_t u_star_j_1_max__ = ns;
        for (size_t j_1__ = 0; j_1__ < u_star_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_star" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_eps_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t x0_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < x0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t z_init_j_1_max__ = nn;
            for (size_t j_1__ = 0; j_1__ < z_init_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_init" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "K";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "amp";
            param_names__.push_back(param_name_stream__.str());
            size_t u_j_1_max__ = ns;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t x_j_2_max__ = nt;
        size_t x_j_1_max__ = nn;
        for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t z_j_2_max__ = nt;
        size_t z_j_1_max__ = nn;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_qqc2_j_2_max__ = ns;
        size_t xhat_qqc2_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_qqc2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_qqc2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_qqc2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_q2_j_2_max__ = ns;
        size_t xhat_q2_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_q2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_q2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_q2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t xhat_qqc_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < xhat_qqc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xhat_qqc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x_ppc_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < x_ppc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_ppc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = (nt * ns);
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t xhat_q_j_2_max__ = ns;
        size_t xhat_q_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < xhat_q_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < xhat_q_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xhat_q" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t x_p_j_2_max__ = ns;
        size_t x_p_j_1_max__ = nt;
        for (size_t j_2__ = 0; j_2__ < x_p_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < x_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_p" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_sum_j_1_max__ = nt;
        for (size_t j_1__ = 0; j_1__ < log_lik_sum_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_sum" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dz";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "num_params";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "num_data";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace

typedef rpne_040_model_namespace::rpne_040_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

